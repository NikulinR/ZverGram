@page "/"

@using ZverGram.Web.Components
@layout MainLayout

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IExhibitionService ExhibitionService
@inject NavigationManager navigationManager

<MudText Typo="Typo.h4" Class="ma-8">Exhibitions</MudText>



<MudTable Items="@ExhibitionsList" Class="ma-8" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<ExhibitionListModel,bool>(FilterFuncSimple)">
    <ColGroup>
    </ColGroup>
    <ToolBarContent>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => AddExhibition())">Add</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
    </HeaderContent>
    <RowTemplate>
        <MudPaper Class="pa-4 ma-2" Elevation="3">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.caption" Align="Align.Right">@context.Category</MudText>
                        <MudText Typo="Typo.h6">@context.Name</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>                    
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => EditExhibition(context.Id))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => DeleteExhibition(context.Id))" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudDivider />
                <MudCardContent>
                    <MudText>@context.Description</MudText>
                </MudCardContent>            
                <MudDivider />
                <MudCardActions>                
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Comment" OnClick="@((e) => ViewExhibition(context.Id))">Comment</MudButton>
                </MudCardActions>
            </MudCard>
        </MudPaper>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code{
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;

    private string searchString = "";

    private IEnumerable<ExhibitionListModel> ExhibitionsList = new List<ExhibitionListModel>();

    private async Task ReloadData()
    {
        ExhibitionsList = await ExhibitionService.GetExhibitions(0, 10000);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private bool FilterFuncSimple(ExhibitionListModel ExhibitionListItem) => FilterFunc(ExhibitionListItem, searchString);

    private bool FilterFunc(ExhibitionListModel ExhibitionListItem, string searchString)
    {
        return 
            string.IsNullOrWhiteSpace(searchString)
            ||
            ExhibitionListItem.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||
            ExhibitionListItem.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        ;
    }

    private async Task AddExhibition()
    {
        var parameters = new DialogParameters {};
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<ExhibitionDialog>("Add exhibition", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {                
                await ExhibitionService.AddExhibition(((ExhibitionDialog)dialog.Dialog).model);
            }
            catch(Exception ex)
            {
                await DialogService.ShowMessageBox("Error", ex.Message);
            }
            await ReloadData();
        }
    }

    private async Task EditExhibition(int exhibitionId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ExhibitionId", exhibitionId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<ExhibitionDialog>("Edit exhibition", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                await ExhibitionService.EditExhibition(exhibitionId, ((ExhibitionDialog)dialog.Dialog).model);
            }
            catch(Exception ex)
            {
                await DialogService.ShowMessageBox("Error", ex.Message);
            }

            await ReloadData();
        }
    }

    private async Task DeleteExhibition(int exhibitionId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this exhibition? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmDialog>("Delete exhibition", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {                
                await ExhibitionService.DeleteExhibition(exhibitionId);
            }
            catch(Exception ex)
            {
                await DialogService.ShowMessageBox("Error", ex.Message);
            }
            await ReloadData();
        }
    }

    private void ViewExhibition(int exhibitionId)
    {
        navigationManager.NavigateTo($"/viewcomments/{exhibitionId}");
    }
}